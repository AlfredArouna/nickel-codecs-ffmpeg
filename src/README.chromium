Contains the sources used to compile FFmpeg binaries used by Google Chrome and
Chromium.

The FFmpeg source is from Alexander Strange's ffmpeg-mt branch:
  git://gitorious.org/~astrange/ffmpeg/ffmpeg-mt.git
  Commit: 42b521db9177ed2d4e62845659fdcd44c59757f9

This corresponds to r18769 in the mainline ffmpeg repository.

The Theora patches are also from the ffmpeg-mt branch above.  The git commit
numbers and the corresponding svn revisions for them from ffmpeg mainline can
be found at the top of each patch.

The libswscale source is from the public libswscale repository:
  git://git.ffmpeg.org/libswscale
  Commit: 69fc1002e2c92aac84dccc5047141feefc94b309

The static_pthread_O2.patch does two things.  First, it uses -O2 instead of
-O3 to build ffmpeg.  This yields a significant savings in binary size, and
also seems to improve performance (lower CPU usage).  Second, the patch adds
a modification that statically links pthreadGC2 into avcodec-52.dll on an
MSYS/MinGW build in Windows.  This reduces the number of DLLs required for
distribution, and lowers the total size of the binaries.

Steps for extracting:
  1) Extract ffmpeg-mt, which creates the directory ffmpeg-mt:
       tar xf ffmpeg-mt.tar.gz
  3) Extract libswscale in place:
       cd ffmpeg-mt
       tar xf ../libswscale.tar.gz
  4) Apply the static_pthread_O2.patch:
       patch -p1 < ../patches/to_upstream/01_static_pthread_O2.patch
  5) Apply additional security patches:
       patch -p1 < ../patches/to_upstream/02_mov_dref_looping.patch
       patch -p1 < ../patches/to_upstream/04_mpeg4_video_to_elementary_stream.patch
       patch -p1 < ../patches/to_upstream/05_vc1_bsfs.patch
       patch -p1 < ../patches/to_upstream/06_respect_flac_dirac_configure.patch
       patch -p1 < ../patches/to_upstream/08_ogg_seek_missing_first_frame.patch
       patch -p1 < ../patches/to_upstream/09_remove_decode_on_config_no_svq3.patch
       patch -p1 < ../patches/ugly/13_get_bits_overrun.patch
       patch -p1 < ../patches/ugly/14_enforce_theora_oob.patch
       patch -p1 < ../patches/ugly/15_enforce_vorbis_oob_divzero.patch
       patch -p1 < ../patches/ugly/16_aac_oob_read.patch

There is also a script "make_src_tree.sh" that automates most of the steps
above for you.  It is currently only tested on linux.

NOTE: Under Windows it is recommended to use Chromium's MinGW/MSYS environment
or 7-Zip to extract the archives.  We've experienced issues when using WinRAR.

Since FFmpeg is sandboxed inside the render process, we're only interested in
building the absolute minimum.

Example configure flags suitable for Chromium (Ogg+Theora+Vorbis), which will
build and install to the directory ./chromium-ffmpeg:

  ./configure --disable-ffmpeg --disable-ffplay --disable-ffserver             \
              --enable-shared --disable-static --disable-debug                 \
      	      --disable-network --disable-encoders --disable-decoders          \
      	      --disable-hwaccels --disable-muxers --disable-demuxers           \
      	      --disable-parsers --disable-bsfs --disable-protocols             \
      	      --disable-devices --disable-filters --disable-gpl                \
      	      --enable-decoder=theora --enable-decoder=vorbis                  \
      	      --enable-demuxer=ogg --enable-pthreads --enable-yasm             \
      	      --prefix=./chromium-ffmpeg

The following flags are used for Google Chrome, which also include non-free
decoders (H.264, AAC and MP3):
  ./configure --disable-ffmpeg --disable-ffplay --disable-ffserver             \
              --enable-shared --disable-static --disable-debug                 \
      	      --disable-network --disable-encoders --disable-decoders          \
      	      --disable-hwaccels --disable-muxers --disable-demuxers           \
      	      --disable-parsers --disable-bsfs --disable-protocols             \
      	      --disable-devices --disable-filters --disable-gpl                \
              --enable-decoder=theora --enable-decoder=vorbis                  \
      	      --enable-demuxer=ogg --enable-decoder=aac --enable-decoder=h264  \
      	      --enable-decoder=mp3 --enable-demuxer=mp3 --enable-demuxer=mov   \
      	      --enable-parser=mpegaudio --enable-pthreads --enable-yasm        \
      	      --prefix=./chrome-ffmpeg

If building on Windows with Chromium's MinGW/MSYS environment, add the following:
              --target-os=mingw32 --enable-memalign-hack --cc=gcc-sjlj

To build:
  make

To install:
  make install

On Windows, run editbin.exe on the resulting DLLs to enable additional security
features:
  1) Start a Visual Studio command prompt:
       Start Menu
           > Microsoft Visual Studio 2005
           > Visual Studio Tools
           > Visual Studio 2005 Command Prompt
  2) Change directories to where the DLLs were built
  3) editbin.exe /NXCOMPAT /DYNAMICBASE *.dll
Now copy the resulting avcodec-52.dll, avformat-52.dll, and
avutil-50.dll alongside chrome.exe for windows.

On Mac, copy the resulting libavcodec.52.dylib, libavformat.52.dylib, and
libavutil.50.dylib into the Chromium.app/Contents/MacOS folder alongside the
Chromium binary.

On Linux, copy the resulting libavcodec.so.52, libavformat.so.52, and
libavutil.so.50 alongside the chrome executable.
